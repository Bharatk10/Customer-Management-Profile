package com.zm.cpm.service;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.zm.cpm.dto.OrganizationDocumnetsDTO;
import com.zm.cpm.dto.OrganizationProfileDTO;
import com.zm.cpm.entities.OrganizationDocument;
import com.zm.cpm.entities.OrganizationProfile;
import com.zm.cpm.mapper.OrganizationProfileMapper;
import com.zm.cpm.repository.OrganizationDocumentRepository;
import com.zm.cpm.repository.OrganizationRespository;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@AllArgsConstructor
@Slf4j
public class OrganizationServiceImpl {
	
	//@Value("${file.storage.location}")
	private final String storageLocation="D:/Pavithr Kumar/java/cpm/cmp-project/org_documents";
	
	
	private OrganizationRespository organizationRespository;
	
	private OrganizationDocumentRepository orgDocumentRepository;
	
	public void createOrg(OrganizationProfileDTO orgProfDto) {
		
		organizationRespository.save(OrganizationProfileMapper.toEntity(orgProfDto));
	}
	
	public void saveOrgDocuments(MultipartFile file, Integer orgId) {
		
	
		
		OrganizationDocument document= new OrganizationDocument();
		document.setFileName(storeFile(file, orgId));
		
		document.setOrganizationProfile(organizationRespository.findById(orgId).get());
		
		log.info("Successfully file created");
		
	}
	
	
	private String storeFile(MultipartFile file, Integer orgId) {
		OrganizationProfile organization = organizationRespository.findById(orgId).get();
		File orgDir=new File(storageLocation,orgId+"_"+organization.getLegalName());
		
		if(!orgDir.exists()) {
				orgDir.mkdir();
		}
		
		
		File destinationFile= new File(orgDir,file.getOriginalFilename());
		try {
			file.transferTo(destinationFile);
		} catch (IllegalStateException | IOException e) {
		  log.info("File Not Created");
		}
		
		System.err.println(destinationFile.getAbsolutePath());
		
		return destinationFile.getAbsolutePath();		
	}
	
	
	
	private List<OrganizationDocumnetsDTO> getAllFiles(Integer id){
		List<OrganizationDocumnetsDTO> orgDocuments= new ArrayList<>();
		OrganizationProfile organization = organizationRespository.findById(id).get();
		File orgDir=new File(storageLocation,id+"_"+organization.getLegalName());
		
//		for(File file:orgDir.listFiles()) {
//			byte[] fileContent;
//			
//			try {
//				fileContent=Files.readAllBytes(file.toPath());
//			} catch (IOException e) {
//				
//				e.printStackTrace();
//			}
//			orgDocuments.add(new OrganizationDocumnetsDTO(file.getName(), fileContent));
//			
//		}
		
		
	}

}
