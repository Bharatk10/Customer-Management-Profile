package com.zm.cpm.service;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.zm.cpm.dto.OrganizationDocumnetsDTO;
import com.zm.cpm.dto.OrganizationProfileDTO;
import com.zm.cpm.entities.OrganizationDocument;
import com.zm.cpm.entities.OrganizationProfile;
import com.zm.cpm.entities.TurnoverRange;
import com.zm.cpm.exception.DuplicateException;
import com.zm.cpm.exception.ResourceNotFoundException;
import com.zm.cpm.mapper.OrganizationProfileMapper;
import com.zm.cpm.repository.OrganizationDocumentRepository;
import com.zm.cpm.repository.OrganizationRespository;
import com.zm.cpm.repository.TurnOverRangeRepository;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@AllArgsConstructor
@Slf4j
public class OrganizationServiceImpl {
	
	//@Value("${file.storage.location}")
	private  final String storageLocation="D:/Pavithr Kumar/java/cpm/cmp-project/org_documents";
	
	
	private OrganizationRespository organizationRespository;
	private TurnOverRangeRepository turnOverRangeRepository;
	
	private OrganizationDocumentRepository orgDocumentRepository;
	
	public void createOrg(OrganizationProfileDTO orgProfDto) {
		if(organizationRespository.findByLegalNameOrEmail(orgProfDto.getLegalName(), orgProfDto.getEmail()).size()>0)
			throw new DuplicateException("Organization exists with legal name or email");
		
		organizationRespository.save(OrganizationProfileMapper.toEntity(orgProfDto, 
				                                      turnOverRangeRepository.findByRange(orgProfDto.getTurnoverRangeId()).get()));
	}
	
	public void saveOrgDocuments(MultipartFile file, Integer orgId) {
		
	
		OrganizationProfile orgProf=organizationRespository.findById(orgId).orElseThrow(()->new ResourceNotFoundException("No Companies Exist with id "+orgId));
		OrganizationDocument document= new OrganizationDocument();
		document.setFileName(storeFile(file, orgProf));
		
		document.setOrganizationProfile(orgProf);
		
		//log.info("Successfully file created");
		
	}
	
	
	private String storeFile(MultipartFile file, OrganizationProfile orgProf) {
		///OrganizationProfile organization = organizationRespository.findById(orgId).orElseThrow(()->new ResourceNotFoundException());
		File orgDir=new File(storageLocation,orgProf.getOrgId()+"_"+orgProf.getLegalName());
		
		if(!orgDir.exists()) {
				orgDir.mkdir();
		}
		
		
		File destinationFile= new File(orgDir,file.getOriginalFilename());
		try {
			file.transferTo(destinationFile);
		} catch (IllegalStateException | IOException e) {
		  log.error(e+"");
		}
		
		
		return destinationFile.getAbsolutePath();		
	}
	
	
	
	public List<OrganizationDocumnetsDTO> getAllFiles(Integer id){
		List<OrganizationDocumnetsDTO> orgDocuments= new ArrayList<>();
		OrganizationProfile organization = organizationRespository.findById(id).orElseThrow(()->new ResourceNotFoundException("No Companies Exist with id "+id));
		File orgDir=new File(storageLocation,id+"_"+organization.getLegalName());
		
		for(File file:orgDir.listFiles()) {
			byte[] fileContent=null;
			
			try {
				fileContent=Files.readAllBytes(file.toPath());
			} catch (IOException e) {
				
				e.printStackTrace();
			}
			orgDocuments.add(new OrganizationDocumnetsDTO(file.getName(), fileContent));
			
		}
		return orgDocuments;
		
	}
	
	

	public void updateOrg(OrganizationProfileDTO orgProfDto, Integer id) {
		OrganizationProfile orgProf=organizationRespository.findById(id).orElseThrow(()->new ResourceNotFoundException("No Companies Exist with id "+id));
		
		if(organizationRespository.findByLegalNameOrEmail(orgProfDto.getLegalName(), orgProfDto.getEmail()).size()>1)
			throw new DuplicateException("Organization exists with legal name or email");
		
		TurnoverRange range =turnOverRangeRepository.findById(orgProfDto.getTurnoverRangeId()).get();
		OrganizationProfile updatedOrg=OrganizationProfileMapper.toEntityWithOrgDetails(orgProfDto, range, orgProf);
		organizationRespository.save(updatedOrg);
		
	}
	
	public OrganizationProfileDTO getOrganization(Integer orgId) {
		OrganizationProfile orgProf=organizationRespository.findById(orgId).orElseThrow(()->new ResourceNotFoundException("No Companies Exist with id "+orgId));
		return OrganizationProfileMapper.toDTO(orgProf);
		
	}

}
